// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type ConfirmActivation struct {
	Email          string `json:"email"`
	Password       string `json:"password"`
	ActivationCode int    `json:"activationCode"`
}

type NewUser struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	Role       int    `json:"role"`
	Firstname  string `json:"firstname"`
	Lastname   string `json:"lastname"`
	Middlename string `json:"middlename"`
}

type NewUserResponse struct {
	ID         string `json:"id"`
	Email      string `json:"email"`
	Role       int    `json:"role"`
	Firstname  string `json:"firstname"`
	Lastname   string `json:"lastname"`
	Middlename string `json:"middlename"`
}

type Response struct {
	Ok bool `json:"ok"`
}

type SignIn struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignInResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type SignUp struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	Nickname   string `json:"nickname"`
	Firstname  string `json:"firstname"`
	Lastname   string `json:"lastname"`
	Middlename string `json:"middlename"`
}

type UpdateUser struct {
	ID         string `json:"id"`
	Email      string `json:"email"`
	Firstname  string `json:"firstname"`
	Lastname   string `json:"lastname"`
	Middlename string `json:"middlename"`
}

type UserHTTP struct {
	ID             string `json:"id"`
	CreatedAt      string `json:"createdAt"`
	UpdatedAt      string `json:"updatedAt"`
	Email          string `json:"email"`
	Password       string `json:"password"`
	Role           Role   `json:"role"`
	Firstname      string `json:"firstname"`
	Lastname       string `json:"lastname"`
	Middlename     string `json:"middlename"`
	IsActive       bool   `json:"isActive"`
	ActivationCode int    `json:"activationCode"`
}

type UsersList struct {
	Users     []*UserHTTP `json:"users"`
	CountRows int         `json:"countRows"`
}

type Role string

const (
	RoleAnonymous  Role = "Anonymous"
	RoleStudent    Role = "Student"
	RoleParent     Role = "Parent"
	RoleTeacher    Role = "Teacher"
	RoleUnitAdmin  Role = "UnitAdmin"
	RoleSuperAdmin Role = "SuperAdmin"
)

var AllRole = []Role{
	RoleAnonymous,
	RoleStudent,
	RoleParent,
	RoleTeacher,
	RoleUnitAdmin,
	RoleSuperAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAnonymous, RoleStudent, RoleParent, RoleTeacher, RoleUnitAdmin, RoleSuperAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
