package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"net/http"
	"strconv"

	"github.com/skinnykaen/rpa_clone/internal/consts"
	"github.com/skinnykaen/rpa_clone/internal/models"
	"github.com/skinnykaen/rpa_clone/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateRobboGroupRel is the resolver for the CreateRobboGroupRel field.
func (r *mutationResolver) CreateRobboGroupRel(ctx context.Context, coreRelID string, targetRelID string) (*models.Response, error) {
	robboGroupId, errC := strconv.Atoi(coreRelID)
	userId, errT := strconv.Atoi(targetRelID)
	if errC != nil {
		r.loggers.Err.Printf("%s", errC.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	if errT != nil {
		r.loggers.Err.Printf("%s", errT.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	_, err := r.robboGroupRelService.CreateRel(uint(userId), uint(robboGroupId))
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}
	return &models.Response{Ok: true}, nil
}

// DeleteRobboGroupRel is the resolver for the DeleteRobboGroupRel field.
func (r *mutationResolver) DeleteRobboGroupRel(ctx context.Context, userID string, robboGroupID string) (*models.Response, error) {
	atoiU, errU := strconv.Atoi(userID)
	atoiR, errR := strconv.Atoi(robboGroupID)
	if errU != nil {
		r.loggers.Err.Printf("%s", errU.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	if errR != nil {
		r.loggers.Err.Printf("%s", errR.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	if err := r.robboGroupRelService.DeleteRel(uint(atoiU), uint(atoiR)); err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	} else {
		return &models.Response{Ok: true}, nil
	}
}

// GetStudentsByRobboGroupID is the resolver for the GetStudentsByRobboGroupId field.
func (r *queryResolver) GetStudentsByRobboGroupID(ctx context.Context, page *int, pageSize *int, robboGroupID string) (*models.UsersList, error) {
	atoi, err := strconv.Atoi(robboGroupID)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	students, countRows, err := r.robboGroupRelService.GetStudentsByRobboGroupId(page, pageSize, uint(atoi))
	if err != nil {
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}
	return &models.UsersList{
		Users:     models.FromUsersCore(students),
		CountRows: countRows,
	}, nil
}

// GetTeachersByRobboGroupID is the resolver for the GetTeachersByRobboGroupId field.
func (r *queryResolver) GetTeachersByRobboGroupID(ctx context.Context, page *int, pageSize *int, robboGroupID string) (*models.UsersList, error) {
	atoi, err := strconv.Atoi(robboGroupID)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	students, countRows, err := r.robboGroupRelService.GetTeachersByRobboGroupId(page, pageSize, uint(atoi))
	if err != nil {
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}
	return &models.UsersList{
		Users:     models.FromUsersCore(students),
		CountRows: countRows,
	}, nil
}

// GetRobboGroupsByUserID is the resolver for the GetRobboGroupsByUserId field.
func (r *queryResolver) GetRobboGroupsByUserID(ctx context.Context, userID string) (*models.RobboGroupHTTPList, error) {
	atoi, err := strconv.Atoi(userID)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	robboGroups, err := r.robboGroupRelService.GetRobboGroupsByUserId(uint(atoi))
	if err != nil {
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}
	return &models.RobboGroupHTTPList{
		RobboGroups: models.FromRobboGroupsCore(robboGroups),
		CountRows:   len(robboGroups),
	}, nil
}
