package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"fmt"
	"rpa_clone/graph"
	"rpa_clone/internal/consts"
	"rpa_clone/internal/models"
	"strconv"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.NewUser) (*models.NewUserResponse, error) {
	panic(fmt.Errorf("not implemented: CreateUser - CreateUser"))
}

// UpdateUser is the resolver for the UpdateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input models.UpdateUser) (*models.UserHTTP, error) {
	atoi, err := strconv.Atoi(input.ID)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, err
	}
	// TODO not required field
	user := models.UserCore{
		ID:         uint(atoi),
		Email:      input.Email,
		Firstname:  input.Firstname,
		Lastname:   input.Lastname,
		Middlename: input.Middlename,
	}
	updatedUser, err := r.userService.UpdateUser(user)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, err
	}
	userHttp := models.UserHTTP{}
	userHttp.FromCore(updatedUser)
	return &userHttp, nil
}

// DeleteUser is the resolver for the DeleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*models.Response, error) {
	atoi, err := strconv.Atoi(id)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, err
	}
	err = r.userService.DeleteUser(uint(atoi))
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, err
	}
	return &models.Response{Ok: true}, nil
}

// SetUserIsActive is the resolver for the SetUserIsActive field.
func (r *mutationResolver) SetUserIsActive(ctx context.Context, id string, isActive bool) (*models.Response, error) {
	panic(fmt.Errorf("not implemented: SetUserIsActive - SetUserIsActive"))
}

// GetUserByAccessToken is the resolver for the GetUserByAccessToken field.
func (r *queryResolver) GetUserByAccessToken(ctx context.Context) (*models.UserHTTP, error) {
	panic(fmt.Errorf("not implemented: GetUserByAccessToken - GetUserByAccessToken"))
}

// GetUserByID is the resolver for the GetUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*models.UserHTTP, error) {
	fmt.Println(ctx.Value(consts.KeyId))
	fmt.Println(ctx.Value(consts.KeyRole))
	atoi, err := strconv.Atoi(id)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, err
	}
	user, err := r.userService.GetUserById(uint(atoi))
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, err
	}
	userHttp := models.UserHTTP{}
	userHttp.FromCore(user)
	return &userHttp, nil
}

// GetAllUsers is the resolver for the GetAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context, page *int, pageSize *int, active bool, roles []models.Role) (*models.UsersList, error) {
	users, countRows, err := r.userService.GetAllUsers(page, pageSize, active, roles)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return &models.UsersList{}, err
	}
	return &models.UsersList{
		Users:     models.FromUsersCore(users),
		CountRows: int(countRows),
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
