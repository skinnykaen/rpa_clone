package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"net/http"
	"strconv"

	"github.com/skinnykaen/rpa_clone/graph"
	"github.com/skinnykaen/rpa_clone/internal/consts"
	"github.com/skinnykaen/rpa_clone/internal/models"
	"github.com/skinnykaen/rpa_clone/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Edges is the resolver for the edges field.
func (r *messageConnectionResolver) Edges(ctx context.Context, obj *models.MessageConnection) ([]*models.MessageEdge, error) {
	edges := make([]*models.MessageEdge, obj.To-obj.From)

	for i := range edges {
		edges[i] = &models.MessageEdge{
			Node:   obj.Messages[obj.From+i],
			Cursor: models.EncodeCursor(obj.From + i),
		}
	}

	return edges, nil
}

// PostMessage is the resolver for the PostMessage field.
func (r *mutationResolver) PostMessage(ctx context.Context, input models.NewMessage) (*models.MessageHTTP, error) {
	senderID := ctx.Value(consts.KeyId).(uint)
	receiverID, err := strconv.Atoi(input.ReceiverID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	message := models.MessageCore{
		Payload:    input.Payload,
		SenderID:   senderID,
		Sender:     models.UserCore{ID: senderID},
		ReceiverID: uint(receiverID),
		Receiver:   models.UserCore{ID: uint(receiverID)},
	}

	message, err = r.messageService.PostMessage(message, ctx.Value(consts.KeyRole).(models.Role))

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	var messageHttp models.MessageHTTP
	messageHttp.FromCore(message)

	if err := r.messageObservers.NotifyObserver(message.ReceiverID, models.MessageModeCreate, messageHttp); err != nil {
		if err.Error() != consts.ErrThereIsNoObservers {
			r.loggers.Err.Printf("%s", err.Error())
			return nil, &gqlerror.Error{
				Extensions: map[string]interface{}{
					"err": err,
				},
			}
		}
	}

	return &messageHttp, nil
}

// UpdateMessage is the resolver for the UpdateMessage field.
func (r *mutationResolver) UpdateMessage(ctx context.Context, id string, payload string) (*models.MessageHTTP, error) {
	mesID, err := strconv.Atoi(id)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	message, err := r.messageService.UpdateMessage(uint(mesID), payload, ctx.Value(consts.KeyId).(uint))

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	var messageHttp models.MessageHTTP
	messageHttp.FromCore(message)

	if err := r.messageObservers.NotifyObserver(message.ReceiverID, models.MessageModeUpdate, messageHttp); err != nil {
		if err.Error() != consts.ErrThereIsNoObservers {
			r.loggers.Err.Printf("%s", err.Error())
			return nil, &gqlerror.Error{
				Extensions: map[string]interface{}{
					"err": err,
				},
			}
		}
	}

	return &messageHttp, nil
}

// DeleteMessages is the resolver for the DeleteMessages field.
func (r *mutationResolver) DeleteMessages(ctx context.Context, idList []string) (*models.Response, error) {

	ids := make([]uint, 0, len(idList))

	for _, id := range idList {

		mesID, err := strconv.Atoi(id)

		if err != nil {
			r.loggers.Err.Printf("%s", err.Error())
			return &models.Response{Ok: false}, &gqlerror.Error{
				Extensions: map[string]interface{}{
					"err": utils.ResponseError{
						Code:    http.StatusBadRequest,
						Message: consts.ErrAtoi,
					},
				},
			}
		}

		ids = append(ids, uint(mesID))
	}

	messages, err := r.messageService.DeleteMessages(ids, ctx.Value(consts.KeyId).(uint))

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return &models.Response{Ok: false}, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	for _, message := range messages {

		var messageHttp models.MessageHTTP
		messageHttp.FromCore(message)

		if err := r.messageObservers.NotifyObserver(message.ReceiverID, models.MessageModeDelete, messageHttp); err != nil {
			if err.Error() != consts.ErrThereIsNoObservers {
				r.loggers.Err.Printf("%s", err.Error())
				return &models.Response{Ok: false}, &gqlerror.Error{
					Extensions: map[string]interface{}{
						"err": err,
					},
				}
			}
		}
	}

	return &models.Response{Ok: true}, err
}

// MessagesFromUser is the resolver for the MessagesFromUser field.
func (r *queryResolver) MessagesFromUser(ctx context.Context, input models.MessagesFromUserInput, count *int, cursor *string) (*models.MessageConnection, error) {
	receiverID, err := strconv.Atoi(input.ReceiverID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	senderID, err := strconv.Atoi(input.SenderID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	messagesFromUser, from, to, err := r.messageService.MessagesFromUser(uint(receiverID), uint(senderID), count, cursor,
		ctx.Value(consts.KeyId).(uint))

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	messagesHttp := models.FromMessagesCore(messagesFromUser)

	return &models.MessageConnection{
		Messages: messagesHttp,
		From:     from,
		To:       to,
	}, nil
}

// GetMessagesByChatID is the resolver for the GetMessagesByChatId field.
func (r *queryResolver) GetMessagesByChatID(ctx context.Context, chatID string, count *int, cursor *string) (*models.MessageConnection, error) {
	atoi, err := strconv.Atoi(chatID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	messagesCore, from, to, err := r.messageService.GetMessagesByChatId(uint(atoi), count, cursor)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	messagesHttp := models.FromMessagesCore(messagesCore)

	return &models.MessageConnection{
		Messages: messagesHttp,
		From:     from,
		To:       to,
	}, nil
}

// MessageSubscription is the resolver for the MessageSubscription field.
func (r *subscriptionResolver) MessageSubscription(ctx context.Context, mode *models.MessageMode) (<-chan *models.MessageForSubscription, error) {
	userID := ctx.Value(consts.KeyId).(uint)
	fmt.Println(userID)

	channel, err := r.messageObservers.CreateObserver(userID, mode)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	go func() {
		<-ctx.Done()
		_ = r.messageObservers.DeleteObserver(userID)
	}()

	return channel, nil
}

// MessageConnection returns graph.MessageConnectionResolver implementation.
func (r *Resolver) MessageConnection() graph.MessageConnectionResolver {
	return &messageConnectionResolver{r}
}

type messageConnectionResolver struct{ *Resolver }
