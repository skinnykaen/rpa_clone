package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"fmt"
	"math/rand"
	"rpa_clone/internal/models"
	"time"
)

// SignUp is the resolver for the SignUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input models.SignUp) (*models.Response, error) {
	rand.Seed(time.Now().UnixNano())
	newUser := models.UserCore{
		Email:          input.Email,
		Password:       input.Password,
		Firstname:      input.Firstname,
		Lastname:       input.Lastname,
		Middlename:     input.Middlename,
		Role:           models.RoleStudent,
		IsActive:       false,
		ActivationCode: uint(rand.Intn(10000)),
	}
	err := r.authService.SignUp(newUser)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return &models.Response{Ok: false}, err
	}
	return &models.Response{Ok: true}, nil
}

// SignIn is the resolver for the SignIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input models.SignIn) (*models.SignInResponse, error) {
	tokens, err := r.authService.SignIn(input.Email, input.Password)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return &models.SignInResponse{}, err
	}
	//TODO set refresh token
	return &models.SignInResponse{
		AccessToken: tokens.Access,
	}, nil
}

// SignOut is the resolver for the SignOut field.
func (r *mutationResolver) SignOut(ctx context.Context) (*models.Response, error) {
	panic(fmt.Errorf("not implemented: SignOut - SignOut"))
}

// RefreshToken is the resolver for the RefreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, refreshToken string) (*models.SignInResponse, error) {
	accessToken, err := r.authService.Refresh(refreshToken)
	if err != nil {
		r.loggers.Err.Printf("%s", err)
		return &models.SignInResponse{}, err
	}
	return &models.SignInResponse{
		AccessToken:  accessToken,
		RefreshToken: "",
	}, nil
}

// ConfirmActivation is the resolver for the ConfirmActivation field.
func (r *mutationResolver) ConfirmActivation(ctx context.Context, input *models.ConfirmActivation) (*models.Response, error) {
	panic(fmt.Errorf("not implemented: ConfirmActivation - ConfirmActivation"))
}
