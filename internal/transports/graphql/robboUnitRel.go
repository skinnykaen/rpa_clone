package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"net/http"
	"strconv"

	"github.com/skinnykaen/rpa_clone/internal/consts"
	"github.com/skinnykaen/rpa_clone/internal/models"
	"github.com/skinnykaen/rpa_clone/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateRobboUnitRel is the resolver for the CreateRobboUnitRel field.
func (r *mutationResolver) CreateRobboUnitRel(ctx context.Context, coreRelID string, targetRelID string) (*models.Response, error) {
	unitAdminId, errC := strconv.Atoi(coreRelID)
	robboUnitId, errT := strconv.Atoi(targetRelID)
	if errC != nil {
		r.loggers.Err.Printf("%s", errC.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	if errT != nil {
		r.loggers.Err.Printf("%s", errT.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	_, err := r.robboUnitRelService.CreateRel(uint(unitAdminId), uint(robboUnitId))
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}
	return &models.Response{Ok: true}, nil
}

// DeleteRobboUnitRel is the resolver for the DeleteRobboUnitRel field.
func (r *mutationResolver) DeleteRobboUnitRel(ctx context.Context, unitAdminID string, robboUnitID string) (*models.Response, error) {
	atoiU, errU := strconv.Atoi(unitAdminID)
	atoiR, errR := strconv.Atoi(robboUnitID)
	if errU != nil {
		r.loggers.Err.Printf("%s", errU.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	if errR != nil {
		r.loggers.Err.Printf("%s", errR.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	if err := r.robboUnitRelService.DeleteRel(uint(atoiU), uint(atoiR)); err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	} else {
		return &models.Response{Ok: true}, nil
	}
}

// GetUnitAdminByRobboUnitID is the resolver for the GetUnitAdminByRobboUnitId field.
func (r *queryResolver) GetUnitAdminByRobboUnitID(ctx context.Context, robboUnitID string) (*models.UsersList, error) {
	atoi, err := strconv.Atoi(robboUnitID)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	unitAdmins, err := r.robboUnitRelService.GetUnitAdminsByRobboUnitId(uint(atoi))
	if err != nil {
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}
	return &models.UsersList{
		Users:     models.FromUsersCore(unitAdmins),
		CountRows: len(unitAdmins),
	}, nil
}

// GetRobboUnitsByUnitAdmin is the resolver for the GetRobboUnitsByUnitAdmin field.
func (r *queryResolver) GetRobboUnitsByUnitAdmin(ctx context.Context, unitAdminID string) (*models.RobboUnitHTTPList, error) {
	atoi, err := strconv.Atoi(unitAdminID)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}
	robboUnits, err := r.robboUnitRelService.GetRobboUnitsByUnitAdmin(uint(atoi))
	if err != nil {
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}
	return &models.RobboUnitHTTPList{
		RobboUnits: models.FromRobboUnitsCore(robboUnits),
		CountRows:  len(robboUnits),
	}, nil
}
