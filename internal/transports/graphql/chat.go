package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"net/http"
	"strconv"

	"github.com/skinnykaen/rpa_clone/graph"
	"github.com/skinnykaen/rpa_clone/internal/consts"
	"github.com/skinnykaen/rpa_clone/internal/models"
	"github.com/skinnykaen/rpa_clone/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateChat is the resolver for the CreateChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, userID string) (*models.ChatHTTP, error) {
	user1ID := ctx.Value(consts.KeyId).(uint)
	user2ID, err := strconv.Atoi(userID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	chat, err := r.chatService.CreateChat(user1ID, uint(user2ID))

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	var chatHttp models.ChatHTTP
	chatHttp.FromCore(chat)

	if err := r.chatObservers.NotifyObserver(uint(user2ID), models.ChatModeCreate, chatHttp); err != nil {
		if err.Error() != consts.ErrThereIsNoObservers {
			r.loggers.Err.Printf("%s", err.Error())
			return nil, &gqlerror.Error{
				Extensions: map[string]interface{}{
					"err": err,
				},
			}
		}
	}

	return &chatHttp, nil
}

// DeleteChat is the resolver for the DeleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, chatID string) (*models.Response, error) {
	userID := ctx.Value(consts.KeyId).(uint)

	id, err := strconv.Atoi(chatID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	chat, err := r.chatService.DeleteChat(uint(id), userID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	var chatHttp models.ChatHTTP
	chatHttp.FromCore(chat)

	user2ID := chat.User2ID

	if user2ID == userID {
		user2ID = chat.User1ID
	}

	if err := r.chatObservers.NotifyObserver(user2ID, models.ChatModeDelete, chatHttp); err != nil {
		if err.Error() != consts.ErrThereIsNoObservers {
			r.loggers.Err.Printf("%s", err.Error())
			return nil, &gqlerror.Error{
				Extensions: map[string]interface{}{
					"err": err,
				},
			}
		}
	}

	return &models.Response{Ok: true}, nil
}

// GetChatByID is the resolver for the GetChatById field.
func (r *queryResolver) GetChatByID(ctx context.Context, chatID string) (*models.ChatHTTP, error) {
	id, err := strconv.Atoi(chatID)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	chat, err := r.chatService.GetChatById(uint(id))

	var chatHttp models.ChatHTTP
	chatHttp.FromCore(chat)

	return &chatHttp, nil
}

// GetChats is the resolver for the GetChats field.
func (r *queryResolver) GetChats(ctx context.Context, page *int, pageSize *int) (*models.ChatsList, error) {
	userID := ctx.Value(consts.KeyId).(uint)

	chats, countRows, err := r.chatService.Chats(userID, page, pageSize)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	res := make([]*models.ChatHTTP, len(chats))

	for i, chat := range chats {
		var chatHttp models.ChatHTTP
		chatHttp.FromCore(chat)
		res[i] = &chatHttp
	}

	return &models.ChatsList{
		Chats:     res,
		CountRows: int(countRows),
	}, nil
}

// ChatSubscription is the resolver for the ChatSubscription field.
func (r *subscriptionResolver) ChatSubscription(ctx context.Context, mode *models.ChatMode) (<-chan *models.ChatForSubscription, error) {
	userID := ctx.Value(consts.KeyId).(uint)

	channel, err := r.chatObservers.CreateObserver(userID, mode)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	go func() {
		<-ctx.Done()
		_ = r.chatObservers.DeleteObserver(userID)
	}()

	return channel, nil
}

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
