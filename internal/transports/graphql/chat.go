package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"net/http"
	"strconv"

	"github.com/skinnykaen/rpa_clone/graph"
	"github.com/skinnykaen/rpa_clone/internal/consts"
	"github.com/skinnykaen/rpa_clone/internal/models"
	"github.com/skinnykaen/rpa_clone/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateChat is the resolver for the CreateChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, user string) (*models.ChatMutationResult, error) {
	user1ID := ctx.Value(consts.KeyId).(uint)
	user2ID, err := strconv.Atoi(user)

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusBadRequest,
					Message: consts.ErrAtoi,
				},
			},
		}
	}

	chat, err := r.chatService.CreateChat(user1ID, uint(user2ID))

	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": utils.ResponseError{
					Code:    http.StatusInternalServerError,
					Message: err.Error(),
				},
			},
		}
	}

	return &models.ChatMutationResult{
		ID:    strconv.Itoa(int(chat.ID)),
		User1: strconv.Itoa(int(chat.User1ID)),
		User2: strconv.Itoa(int(chat.User2ID)),
	}, nil
}

// DeleteChat is the resolver for the DeleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, id string) (*models.Response, error) {
	panic(fmt.Errorf("not implemented: DeleteChat - DeleteChat"))
}

// Chats is the resolver for the Chats field.
func (r *queryResolver) Chats(ctx context.Context, user *string) ([]*models.ChatHTTP, error) {
	panic(fmt.Errorf("not implemented: Chats - Chats"))
}

// UserJoined is the resolver for the UserJoined field.
func (r *subscriptionResolver) UserJoined(ctx context.Context, user string, chat string) (<-chan *models.MessageHTTP, error) {
	panic(fmt.Errorf("not implemented: UserJoined - UserJoined"))
}

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
