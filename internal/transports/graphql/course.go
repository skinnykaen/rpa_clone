package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"github.com/skinnykaen/rpa_clone/internal/consts"
	"github.com/skinnykaen/rpa_clone/internal/models"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// GetCourseByID is the resolver for the GetCourseById field.
func (r *queryResolver) GetCourseByID(ctx context.Context, id string) (*models.CourseHTTP, error) {
	course, err := r.courseService.GetCourseById(id)
	if err != nil {
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	var courseHttp models.CourseHTTP
	courseHttp.FromCore(&course)

	return &courseHttp, nil
}

// GetCoursesByUser is the resolver for the GetCoursesByUser field.
func (r *queryResolver) GetCoursesByUser(ctx context.Context) (*models.CoursesListHTTP, error) {
	clientId := ctx.Value(consts.KeyId).(uint)
	clientRole := ctx.Value(consts.KeyRole).(models.Role)

	courses, err := r.courseService.GetCoursesByUser(clientId, clientRole)
	if err != nil {
		r.loggers.Err.Printf("%s", err.Error())
		return nil, &gqlerror.Error{
			Extensions: map[string]interface{}{
				"err": err,
			},
		}
	}

	return &models.CoursesListHTTP{
		Results:   models.FromCoursesCore(courses.Results),
		CountRows: courses.Pagination.Count,
	}, nil
}
