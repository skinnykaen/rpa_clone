type MessageHttp {
    id: ID!
    payload: String!
    receiver: UserHttp!
    sender: UserHttp!
    chatId: ID!
    sentAt: Timestamp!
    updatedAt: Timestamp
    checked: Boolean!
}

input MessagesFromUserInput{
    receiverId:ID!
    senderId:ID!
}

type MessageEdge {
    node: MessageHttp
    cursor: ID!
}

type MessageConnection {
    edges: [MessageEdge]
    pageInfo: PageInfo!
    totalCount: Int
}

type PageInfo {
    startCursor: ID!
    endCursor: ID!
    hasNextPage: Boolean!
}

input NewMessage{
    payload: String!
    receiverId: ID!
}

enum MessageMode{
    Create
    Delete
    Update
    Check
}

type MessageForSubscription{
    messageHttp:MessageHttp!
    messageMode:MessageMode!
}

extend type Query {
    MessagesFromUser(input:MessagesFromUserInput!, count: Int, cursor:ID): MessageConnection! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
    GetMessagesByChatId(chatId: ID!, count: Int, cursor:ID): MessageConnection! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
}

extend type Mutation {
    PostMessage(input:NewMessage!): MessageHttp! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
    UpdateMessage(id:ID!, payload: String!): MessageHttp! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
    DeleteMessages(idList:[ID!]!):Response! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
    CheckMessage(id:ID!):Response! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
}

extend type Subscription {
    MessageSubscription(mode:MessageMode): MessageForSubscription!
}

