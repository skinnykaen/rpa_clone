
scalar Time

type MessageHttp {
    id: ID!
    payload: String!
    sender: UserHttp!
    receiver: UserHttp!
    chatID: ID!
    time: Time
}

input MessagesFromUserInput{
    receiver:ID!
    sender:ID!
}

type MessageEdge {
    node: MessageHttp
    cursor: ID!
}

type MessageConnection {
    edges: [MessageEdge]
    pageInfo: PageInfo!
    totalCount: Int
}

type PageInfo {
    startCursor: ID!
    endCursor: ID!
    hasNextPage: Boolean!
}

input NewMessage{
    payload: String!
    receiver: ID!
}

extend type Query {
    MessagesFromUser(input:MessagesFromUserInput!, first: Int, after:ID):MessageConnection! @hasRole(roles: [SuperAdmin, Student])
}

extend type Mutation {
    PostMessage(input:NewMessage!): MessageHttp! @hasRole(roles: [SuperAdmin, Student])
    UpdateMessage(id:ID!, payload: String!):MessageHttp!
    DeleteMessage(id:ID!):Response! @hasRole(roles: [SuperAdmin, Student])
}



